name: CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y lld jq

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Core Services
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/common:${{ github.sha }}
            ${{ secrets.DOCKER_REGISTRY }}/ai_chatbot:${{ github.sha }}
            ${{ secrets.DOCKER_REGISTRY }}/predictive_analytics:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Build and Push Dependent Services
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/personalization:${{ github.sha }}
            ${{ secrets.DOCKER_REGISTRY }}/automl:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.example.com
    env:
      CLUSTER_NAME: staging-cluster
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Infrastructure Services
        run: |
          chmod +x ./scripts/wait-for-service.sh
          
          # Deploy and wait for PostgreSQL
          aws ecs update-service --cluster $CLUSTER_NAME \
            --service postgres-service --force-new-deployment
          ./scripts/wait-for-service.sh postgres-service
          
          # Deploy and wait for Redis
          aws ecs update-service --cluster $CLUSTER_NAME \
            --service redis-service --force-new-deployment
          ./scripts/wait-for-service.sh redis-service

      - name: Deploy Core Services
        run: |
          # Deploy and wait for AI Chatbot
          aws ecs update-service --cluster $CLUSTER_NAME \
            --service ai-chatbot-service --force-new-deployment
          ./scripts/wait-for-service.sh ai-chatbot-service
          
          # Deploy and wait for Predictive Analytics
          aws ecs update-service --cluster $CLUSTER_NAME \
            --service predictive-analytics-service --force-new-deployment
          ./scripts/wait-for-service.sh predictive-analytics-service

      - name: Deploy Dependent Services
        run: |
          # Deploy and wait for Personalization Engine
          aws ecs update-service --cluster $CLUSTER_NAME \
            --service personalization-service --force-new-deployment
          ./scripts/wait-for-service.sh personalization-service
          
          # Deploy and wait for AutoML
          aws ecs update-service --cluster $CLUSTER_NAME \
            --service automl-service --force-new-deployment
          ./scripts/wait-for-service.sh automl-service

      - name: Health Checks
        run: |
          chmod +x ./scripts/health_check.sh
          
          # Check core services
          ./scripts/health_check.sh staging ai-chatbot
          ./scripts/health_check.sh staging predictive-analytics
          
          # Check dependent services
          ./scripts/health_check.sh staging personalization
          ./scripts/health_check.sh staging automl

  deploy-production:
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://ai-platform.example.com
    env:
      CLUSTER_NAME: production-cluster
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Infrastructure Services
        run: |
          chmod +x ./scripts/wait-for-service.sh
          
          # Deploy and wait for PostgreSQL
          aws ecs update-service --cluster $CLUSTER_NAME \
            --service postgres-service --force-new-deployment
          ./scripts/wait-for-service.sh postgres-service
          
          # Deploy and wait for Redis
          aws ecs update-service --cluster $CLUSTER_NAME \
            --service redis-service --force-new-deployment
          ./scripts/wait-for-service.sh redis-service

      - name: Canary Deployment - Core Services
        run: |
          chmod +x ./scripts/health_check.sh
          
          # Deploy AI Chatbot canary
          aws ecs update-service --cluster $CLUSTER_NAME \
            --service ai-chatbot-canary --force-new-deployment
          ./scripts/wait-for-service.sh ai-chatbot-canary
          
          # Monitor canary for 5 minutes
          echo "Monitoring canary deployment for 5 minutes..."
          sleep 300
          
          # If health checks pass, deploy to all instances
          if ./scripts/health_check.sh production ai-chatbot-canary; then
            aws ecs update-service --cluster $CLUSTER_NAME \
              --service ai-chatbot-service --force-new-deployment
            ./scripts/wait-for-service.sh ai-chatbot-service
          else
            echo "Canary deployment failed health checks. Rolling back..."
            aws ecs update-service --cluster $CLUSTER_NAME \
              --service ai-chatbot-canary --force-new-deployment \
              --task-definition ai-chatbot-canary:previous
            exit 1
          fi

      - name: Deploy Remaining Services
        if: success()
        run: |
          # Deploy and wait for Predictive Analytics
          aws ecs update-service --cluster $CLUSTER_NAME \
            --service predictive-analytics-service --force-new-deployment
          ./scripts/wait-for-service.sh predictive-analytics-service
          
          # Deploy and wait for Personalization
          aws ecs update-service --cluster $CLUSTER_NAME \
            --service personalization-service --force-new-deployment
          ./scripts/wait-for-service.sh personalization-service
          
          # Deploy and wait for AutoML
          aws ecs update-service --cluster $CLUSTER_NAME \
            --service automl-service --force-new-deployment
          ./scripts/wait-for-service.sh automl-service

      - name: Final Health Check
        run: |
          # Check all services
          ./scripts/health_check.sh production ai-chatbot
          ./scripts/health_check.sh production predictive-analytics
          ./scripts/health_check.sh production personalization
          ./scripts/health_check.sh production automl

      - name: Create Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/release/*
          body_path: CHANGELOG.md
          draft: false
          prerelease: false